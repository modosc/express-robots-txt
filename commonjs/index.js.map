{"version":3,"sources":["../esm/index.mjs"],"names":["asArray","value","undefined","Array","isArray","render","config","SitemapArray","HostArray","output","map","robot","userAgentArray","UserAgent","userAgent","push","CrawlDelay","Sitemap","concat","Host","Disallow","disallow","line","join","EOL","length","sitemap","host","buildRobots","fs","readFileSync","robots","router","get","req","res","header","send"],"mappings":"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","sourcesContent":["import fs from 'fs'\nimport { Router } from 'express'\nimport { EOL } from 'os'\n\nconst asArray = function asArray(value) {\n  if (value === undefined) return []\n  if (Array.isArray(value)) return value\n  return [value]\n}\n\nfunction render(config) {\n  let SitemapArray = []\n  let HostArray = []\n  let output = asArray(config).map((robot) => {\n    let userAgentArray = []\n    if (Array.isArray(robot.UserAgent)) {\n      userAgentArray = robot.UserAgent.map((userAgent) => `User-agent: ${userAgent}`)\n    } else {\n      userAgentArray.push(`User-agent: ${robot.UserAgent}`)\n    }\n    if (robot.CrawlDelay) {\n      userAgentArray.push(`Crawl-delay: ${robot.CrawlDelay}`)\n    }\n\n    if (robot.Sitemap) {\n      SitemapArray = SitemapArray.concat(robot.Sitemap)\n    }\n    if (robot.Host) {\n      HostArray = HostArray.concat(robot.Host)\n    }\n\n    return userAgentArray.concat(asArray(robot.Disallow).map((disallow) => {\n      if (Array.isArray(disallow)) {\n        return disallow.map((line) => `Disallow: ${line}`).join(EOL)\n      }\n      return `Disallow: ${disallow}`\n    })).join(EOL)\n  }).join(EOL)\n\n  if (SitemapArray.length > 0) {\n    output += `${EOL}${SitemapArray.map((sitemap) => `Sitemap: ${sitemap}`).join(EOL)}`\n  }\n  if (HostArray.length > 0) {\n    output += `${EOL}${HostArray.map((host) => `Host: ${host}`).join(EOL)}`\n  }\n\n  return output\n}\n\nfunction buildRobots(config) {\n  if (config) {\n    if (typeof config === 'string') {\n      return fs.readFileSync(config, 'utf8')\n    }\n    return render(config)\n  }\n  return ''\n}\n\nfunction robots(config) {\n  const router = Router()\n\n  router.get('/robots.txt', (req, res) => {\n    res.header('Content-Type', 'text/plain')\n    res.send(buildRobots(config))\n  })\n\n  return router\n}\n\nexport default robots\n"],"file":"index.js"}